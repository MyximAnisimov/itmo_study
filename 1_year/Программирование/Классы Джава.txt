class Pet {
   int weight; - поле класса
   String name; - поле класса
   String type; - поле класса

int sum(int a, int b) - метод класса
 {
   int c = a + b;
   return c;
}
}


this - оператор, повзволяющий ссылаться объекту на вызвавший объект
Пример:
class Human {
String name;
int age;
public void setName(String name){
this.name=name;
}
}

public - публичный, общедоступный класс или член класса. 
Поля и методы, объявленные с модификатором public, 
видны другим классам из текущего пакета и из внешних пакетов.
Пример:
public class N1()

private - закрытый класс или член класса, противоположность модификатору 
public. Закрытый класс или член класса доступен только из кода в том же классе
Пример:
private int N2;

protected - такой класс или член класса доступен из любого места в
текущем классе или пакете или в производных классах, 
даже если они находятся в других пакетах
Пример:
protected int N3;

Abstract - Абстрактные классы призваны предоставлять базовый функционал
для классов-наследниковю Отличие от обычного класса: мы не можем использовать 
конструктор абстрактного класса для создания объекта

Наследование – это процесс перенимания классом свойств (методов и полей)
другого класса
Пример:
class N1() {
...
}
class N2 extends N1 {
...
}

class Calculator {
   int c;
	
   public void addition(int a, int b) {
      c = a + b;
      System.out.println("Сумма чисел: " + c);
   }
	
   public void subtraction(int a, int b) {
      c = a - b;
      System.out.println("Разность чисел: " + c);
   }
}

public class My_Calculator extends Calculator {
   public void multiplication(int a, int b) {
      c = a * b;
      System.out.println("Произведение чисел: " + c);
   }

static - модификатор, который принадлежит классу, а не экземпляру класса. В
независимости от количества созданных объектов класса — всегда будет 
существовать только один экземпляр статического поля. Значение такого
поля будет единым и общим для всех объектов класса, содержащих это поле. Описывает
сам класс а не его экземпляры!

Полиморфизм – способность объекта принимать множество различных форм. 
Наиболее распространенное использование полиморфизма в ООП происходит,
когда ссылка на родительский класс используется для ссылки на объект 
дочернего класса.

@Override - предопределение 
interface - вызывет полностью абстрактный класс. Наличие слова interface
 означает, что именно так должны выглядеть все классы, которые реализуют 
данный интерфейс. Таким образом, любой код, использующий конкретный интерфейс, 
знает только то, какие методы вызываются для этого интерфейса, но не более того
